{"ast":null,"code":"var _jsxFileName = \"/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SoundButton = ({\n  keyCode,\n  letter,\n  soundSource\n}) => {\n  _s();\n\n  const audioTag = useRef(null);\n  const onSoundButtonClick = useCallback((keyCode, sound) => {\n    audioTag.current.play();\n  }, []);\n  const onKeyPress = useCallback(ev => {\n    const eventKeyCode = ev.key.toUpperCase().charCodeAt(0);\n\n    if (audioTag.current != null && keyCode === eventKeyCode) {\n      audioTag.current.play();\n    }\n  }, [keyCode]);\n  useEffect(() => {\n    if (soundSource != null) {\n      audioTag.current.src = soundSource;\n    }\n  }, [soundSource]);\n  useEffect(() => {\n    document.addEventListener(\"keypress\", onKeyPress);\n    return () => {\n      document.removeEventListener(\"keypress\", onKeyPress);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onSoundButtonClick,\n    id: keyCode,\n    className: \"drum-pad\",\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioTag,\n      style: {\n        display: \"none\"\n      },\n      className: \"clip\",\n      id: letter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), letter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SoundButton, \"RMkQ9RazCAN/OGcr8e8h6i7RUtU=\");\n\n_c = SoundButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundButton\");","map":{"version":3,"sources":["/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js"],"names":["React","useCallback","useEffect","useRef","useState","SoundButton","keyCode","letter","soundSource","audioTag","onSoundButtonClick","sound","current","play","onKeyPress","ev","eventKeyCode","key","toUpperCase","charCodeAt","src","document","addEventListener","removeEventListener","display"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,QAAgE,OAAhE;;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA;AAAnB,CAAD,KAAsC;AAAA;;AAC/D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAMO,kBAAkB,GAAGT,WAAW,CAAC,CAACK,OAAD,EAAUK,KAAV,KAAoB;AACzDF,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,IAAjB;AACD,GAFqC,EAEnC,EAFmC,CAAtC;AAIA,QAAMC,UAAU,GAAGb,WAAW,CAC3Bc,EAAD,IAAQ;AACN,UAAMC,YAAY,GAAGD,EAAE,CAACE,GAAH,CAAOC,WAAP,GAAqBC,UAArB,CAAgC,CAAhC,CAArB;;AACA,QAAIV,QAAQ,CAACG,OAAT,IAAoB,IAApB,IAA4BN,OAAO,KAAKU,YAA5C,EAA0D;AACxDP,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,IAAjB;AACD;AACF,GAN2B,EAO5B,CAACP,OAAD,CAP4B,CAA9B;AAUAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,WAAW,IAAI,IAAnB,EAAyB;AACvBC,MAAAA,QAAQ,CAACG,OAAT,CAAiBQ,GAAjB,GAAuBZ,WAAvB;AACD;AACF,GAJQ,EAIN,CAACA,WAAD,CAJM,CAAT;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,UAA1B,EAAsCR,UAAtC;AAEA,WAAO,MAAM;AACXO,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,UAA7B,EAAyCT,UAAzC;AACD,KAFD;AAGD,GANQ,CAAT;AAQA,sBACE;AAAQ,IAAA,OAAO,EAAEJ,kBAAjB;AAAqC,IAAA,EAAE,EAAEJ,OAAzC;AAAkD,IAAA,SAAS,EAAC,UAA5D;AAAA,4BACE;AACE,MAAA,GAAG,EAAEG,QADP;AAEE,MAAA,KAAK,EAAE;AAAEe,QAAAA,OAAO,EAAE;AAAX,OAFT;AAGE,MAAA,SAAS,EAAE,MAHb;AAIE,MAAA,EAAE,EAAEjB;AAJN;AAAA;AAAA;AAAA;AAAA,YADF,EAOGA,MAPH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA1CM;;GAAMF,W;;KAAAA,W","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport const SoundButton = ({ keyCode, letter, soundSource }) => {\n  const audioTag = useRef(null);\n\n  const onSoundButtonClick = useCallback((keyCode, sound) => {\n    audioTag.current.play();\n  }, []);\n\n  const onKeyPress = useCallback(\n    (ev) => {\n      const eventKeyCode = ev.key.toUpperCase().charCodeAt(0);\n      if (audioTag.current != null && keyCode === eventKeyCode) {\n        audioTag.current.play();\n      }\n    },\n    [keyCode]\n  );\n\n  useEffect(() => {\n    if (soundSource != null) {\n      audioTag.current.src = soundSource;\n    }\n  }, [soundSource]);\n\n  useEffect(() => {\n    document.addEventListener(\"keypress\", onKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keypress\", onKeyPress);\n    };\n  });\n\n  return (\n    <button onClick={onSoundButtonClick} id={keyCode} className=\"drum-pad\">\n      <audio\n        ref={audioTag}\n        style={{ display: \"none\" }}\n        className={\"clip\"}\n        id={letter}\n      />\n      {letter}\n    </button>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}