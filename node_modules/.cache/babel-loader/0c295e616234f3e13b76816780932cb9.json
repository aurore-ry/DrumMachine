{"ast":null,"code":"var _jsxFileName = \"/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const playSound = (letter, keyCode) => {\n  if (audioTag.current != null) {\n    console.log(audioTag.current);\n    audioTag.current.src = `/assets/sounds/${keyCode}-${letter}.wav`;\n    audioTag.current.play();\n  }\n};\nexport const onSoundButtonClick = useCallback((keyCode, sound) => {\n  setCurrentSound({\n    keyCode,\n    sound\n  });\n}, []);\nexport const onKeyPress = useCallback(ev => {\n  const keyCode = ev.key.toUpperCase().charCodeAt(0);\n  playSound(ev.key.toUpperCase(), keyCode);\n  console.log(ev);\n}, []);\nuseEffect(() => {\n  if (!currentSound) {\n    return;\n  }\n\n  playSound(currentSound.sound.letter, currentSound.keyCode);\n}, [currentSound]);\nuseEffect(() => {\n  document.addEventListener(\"keypress\", onKeyPress);\n  return () => {\n    document.removeEventListener(\"keypress\", onKeyPress);\n  };\n});\nexport const SoundButton = ({\n  onClick,\n  keyCode,\n  letter\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: onClick,\n  id: keyCode,\n  className: \"drum-pad\",\n  children: letter\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 3\n}, this);\n_c = SoundButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundButton\");","map":{"version":3,"sources":["/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js"],"names":["React","playSound","letter","keyCode","audioTag","current","console","log","src","play","onSoundButtonClick","useCallback","sound","setCurrentSound","onKeyPress","ev","key","toUpperCase","charCodeAt","useEffect","currentSound","document","addEventListener","removeEventListener","SoundButton","onClick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC5C,MAAIC,QAAQ,CAACC,OAAT,IAAoB,IAAxB,EAA8B;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,OAArB;AACAD,IAAAA,QAAQ,CAACC,OAAT,CAAiBG,GAAjB,GAAwB,kBAAiBL,OAAQ,IAAGD,MAAO,MAA3D;AACAE,IAAAA,QAAQ,CAACC,OAAT,CAAiBI,IAAjB;AACD;AACF,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAGC,WAAW,CAAC,CAACR,OAAD,EAAUS,KAAV,KAAoB;AAChEC,EAAAA,eAAe,CAAC;AAAEV,IAAAA,OAAF;AAAWS,IAAAA;AAAX,GAAD,CAAf;AACD,CAF4C,EAE1C,EAF0C,CAAtC;AAIP,OAAO,MAAME,UAAU,GAAGH,WAAW,CAAEI,EAAD,IAAQ;AAC5C,QAAMZ,OAAO,GAAGY,EAAE,CAACC,GAAH,CAAOC,WAAP,GAAqBC,UAArB,CAAgC,CAAhC,CAAhB;AACAjB,EAAAA,SAAS,CAACc,EAAE,CAACC,GAAH,CAAOC,WAAP,EAAD,EAAuBd,OAAvB,CAAT;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYQ,EAAZ;AACD,CAJoC,EAIlC,EAJkC,CAA9B;AAMPI,SAAS,CAAC,MAAM;AACd,MAAI,CAACC,YAAL,EAAmB;AACjB;AACD;;AACDnB,EAAAA,SAAS,CAACmB,YAAY,CAACR,KAAb,CAAmBV,MAApB,EAA4BkB,YAAY,CAACjB,OAAzC,CAAT;AACD,CALQ,EAKN,CAACiB,YAAD,CALM,CAAT;AAOAD,SAAS,CAAC,MAAM;AACdE,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,UAA1B,EAAsCR,UAAtC;AAEA,SAAO,MAAM;AACXO,IAAAA,QAAQ,CAACE,mBAAT,CAA6B,UAA7B,EAAyCT,UAAzC;AACD,GAFD;AAGD,CANQ,CAAT;AAQA,OAAO,MAAMU,WAAW,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWtB,EAAAA,OAAX;AAAoBD,EAAAA;AAApB,CAAD,kBACzB;AAAQ,EAAA,OAAO,EAAEuB,OAAjB;AAA0B,EAAA,EAAE,EAAEtB,OAA9B;AAAuC,EAAA,SAAS,EAAC,UAAjD;AAAA,YACGD;AADH;AAAA;AAAA;AAAA;AAAA,QADK;KAAMsB,W","sourcesContent":["import React from \"react\";\n\nexport const playSound = (letter, keyCode) => {\n  if (audioTag.current != null) {\n    console.log(audioTag.current);\n    audioTag.current.src = `/assets/sounds/${keyCode}-${letter}.wav`;\n    audioTag.current.play();\n  }\n};\n\nexport const onSoundButtonClick = useCallback((keyCode, sound) => {\n  setCurrentSound({ keyCode, sound });\n}, []);\n\nexport const onKeyPress = useCallback((ev) => {\n  const keyCode = ev.key.toUpperCase().charCodeAt(0);\n  playSound(ev.key.toUpperCase(), keyCode);\n  console.log(ev);\n}, []);\n\nuseEffect(() => {\n  if (!currentSound) {\n    return;\n  }\n  playSound(currentSound.sound.letter, currentSound.keyCode);\n}, [currentSound]);\n\nuseEffect(() => {\n  document.addEventListener(\"keypress\", onKeyPress);\n\n  return () => {\n    document.removeEventListener(\"keypress\", onKeyPress);\n  };\n});\n\nexport const SoundButton = ({ onClick, keyCode, letter }) => (\n  <button onClick={onClick} id={keyCode} className=\"drum-pad\">\n    {letter}\n  </button>\n);\n"]},"metadata":{},"sourceType":"module"}