{"ast":null,"code":"var _jsxFileName = \"/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./styles.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SoundButton = ({\n  backgroundColor,\n  keyCode,\n  letter,\n  soundSource,\n  onPlay\n}) => {\n  _s();\n\n  const audioTag = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playSound = useCallback(() => {\n    audioTag.current.play();\n    onPlay(keyCode);\n    setIsPlaying(true);\n  }, [keyCode, onPlay]);\n  const stopSound = useCallback(() => {\n    audioTag.current.load();\n    audioTag.current.fastSeek(0);\n    setIsPlaying(false);\n  }, []);\n  const toggleSound = useCallback(() => {\n    if (!audioTag.current) {\n      return;\n    }\n\n    if (!isPlaying) {\n      playSound();\n    } else {\n      stopSound();\n    }\n  }, [isPlaying, playSound, stopSound]);\n  const onSoundButtonClick = useCallback(() => {\n    toggleSound();\n  }, [toggleSound]);\n  const onKeyPress = useCallback(ev => {\n    const eventKeyCode = parseInt(ev.key.toUpperCase().charCodeAt(0));\n\n    if (parseInt(keyCode) === eventKeyCode) {\n      toggleSound();\n    }\n  }, [keyCode, toggleSound]);\n  const onSoundEnded = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n  useEffect(() => {\n    if (soundSource != null) {\n      audioTag.current.src = soundSource;\n    }\n  }, [soundSource]);\n  useEffect(() => {\n    document.addEventListener(\"keyup\", onKeyPress);\n    return () => {\n      document.removeEventListener(\"keyup\", onKeyPress);\n    };\n  }, [onKeyPress]);\n  const buttonClasses = [\"drum-pad\", isPlaying && \"active\" || \"\"].join(\" \");\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onSoundButtonClick,\n    id: letter,\n    className: buttonClasses,\n    style: {\n      backgroundColor: isPlaying ? backgroundColor : \"rgb(95, 95, 95)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioTag,\n      style: {\n        display: \"none\"\n      },\n      className: \"clip\",\n      id: letter,\n      loop: true,\n      onEnded: onSoundEnded,\n      src: soundSource\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), letter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SoundButton, \"2t2dYjqP1QWtzHhQGSJoH5Cvjh8=\");\n\n_c = SoundButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundButton\");","map":{"version":3,"sources":["/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js"],"names":["React","useCallback","useEffect","useRef","useState","SoundButton","backgroundColor","keyCode","letter","soundSource","onPlay","audioTag","isPlaying","setIsPlaying","playSound","current","play","stopSound","load","fastSeek","toggleSound","onSoundButtonClick","onKeyPress","ev","eventKeyCode","parseInt","key","toUpperCase","charCodeAt","onSoundEnded","src","document","addEventListener","removeEventListener","buttonClasses","join","display"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport \"./styles.scss\";\n\nexport const SoundButton = ({\n  backgroundColor,\n  keyCode,\n  letter,\n  soundSource,\n  onPlay,\n}) => {\n  const audioTag = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const playSound = useCallback(() => {\n    audioTag.current.play();\n    onPlay(keyCode);\n    setIsPlaying(true);\n  }, [keyCode, onPlay]);\n\n  const stopSound = useCallback(() => {\n    audioTag.current.load();\n    audioTag.current.fastSeek(0);\n    setIsPlaying(false);\n  }, []);\n\n  const toggleSound = useCallback(() => {\n    if (!audioTag.current) {\n      return;\n    }\n    if (!isPlaying) {\n      playSound();\n    } else {\n      stopSound();\n    }\n  }, [isPlaying, playSound, stopSound]);\n\n  const onSoundButtonClick = useCallback(() => {\n    toggleSound();\n  }, [toggleSound]);\n\n  const onKeyPress = useCallback(\n    (ev) => {\n      const eventKeyCode = parseInt(ev.key.toUpperCase().charCodeAt(0));\n      if (parseInt(keyCode) === eventKeyCode) {\n        toggleSound();\n      }\n    },\n    [keyCode, toggleSound]\n  );\n\n  const onSoundEnded = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  useEffect(() => {\n    if (soundSource != null) {\n      audioTag.current.src = soundSource;\n    }\n  }, [soundSource]);\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", onKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keyup\", onKeyPress);\n    };\n  }, [onKeyPress]);\n\n  const buttonClasses = [\"drum-pad\", (isPlaying && \"active\") || \"\"].join(\" \");\n\n  return (\n    <button\n      onClick={onSoundButtonClick}\n      id={letter}\n      className={buttonClasses}\n      style={{\n        backgroundColor: isPlaying ? backgroundColor : \"rgb(95, 95, 95)\",\n      }}\n    >\n      <audio\n        ref={audioTag}\n        style={{ display: \"none\" }}\n        className={\"clip\"}\n        id={letter}\n        loop={true}\n        onEnded={onSoundEnded}\n        src={soundSource}\n      />\n      {letter}\n    </button>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}