{"ast":null,"code":"var _jsxFileName = \"/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./styles.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SoundButton = ({\n  keyCode,\n  letter,\n  soundSource,\n  onPlay\n}) => {\n  _s();\n\n  const audioTag = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playSound = useCallback(() => {\n    audioTag.current.src = soundSource;\n    audioTag.current.play();\n    onPlay(keyCode);\n    setIsPlaying(true);\n  }, [keyCode, onPlay]);\n  const stopSound = useCallback(() => {\n    audioTag.current.pause();\n  }, []);\n  const onSoundButtonClick = useCallback(() => {\n    if (!isPlaying) {\n      playSound();\n    } else {\n      stopSound();\n    }\n  }, [playSound]);\n  const onKeyPress = useCallback(ev => {\n    const eventKeyCode = parseInt(ev.key.toUpperCase().charCodeAt(0));\n\n    if (audioTag.current != null && parseInt(keyCode) === eventKeyCode) {\n      playSound();\n    }\n  }, [keyCode, playSound]);\n  const onSoundEnded = useCallback(() => {\n    setIsPlaying(false);\n  });\n  useEffect(() => {\n    if (soundSource != null) {\n      audioTag.current.src = soundSource;\n    }\n  }, [soundSource]);\n  useEffect(() => {\n    document.addEventListener(\"keyup\", onKeyPress);\n    return () => {\n      document.removeEventListener(\"keyup\", onKeyPress);\n    };\n  }, [onKeyPress]);\n  const buttonClasses = [\"drum-pad\", isPlaying && \"active\"].join(\" \");\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onSoundButtonClick,\n    id: keyCode,\n    className: buttonClasses,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioTag,\n      style: {\n        display: \"none\"\n      },\n      className: \"clip\",\n      id: letter,\n      onEnded: onSoundEnded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), letter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SoundButton, \"SbsxGTA1MJ+UUT94OM54AYrT99U=\");\n\n_c = SoundButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundButton\");","map":{"version":3,"sources":["/home/xana/Dev/FreeCodeCamp/drum-pad-machine/src/components/SoundButton/index.js"],"names":["React","useCallback","useEffect","useRef","useState","SoundButton","keyCode","letter","soundSource","onPlay","audioTag","isPlaying","setIsPlaying","playSound","current","src","play","stopSound","pause","onSoundButtonClick","onKeyPress","ev","eventKeyCode","parseInt","key","toUpperCase","charCodeAt","onSoundEnded","document","addEventListener","removeEventListener","buttonClasses","join","display"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport \"./styles.scss\";\n\nexport const SoundButton = ({ keyCode, letter, soundSource, onPlay }) => {\n  const audioTag = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const playSound = useCallback(() => {\n    audioTag.current.src = soundSource;\n    audioTag.current.play();\n    onPlay(keyCode);\n    setIsPlaying(true);\n  }, [keyCode, onPlay]);\n\n  const stopSound = useCallback(() => {\n    audioTag.current.pause();\n  }, []);\n\n  const onSoundButtonClick = useCallback(() => {\n    if (!isPlaying) {\n      playSound();\n    } else {\n      stopSound();\n    }\n  }, [playSound]);\n\n  const onKeyPress = useCallback(\n    (ev) => {\n      const eventKeyCode = parseInt(ev.key.toUpperCase().charCodeAt(0));\n      if (audioTag.current != null && parseInt(keyCode) === eventKeyCode) {\n        playSound();\n      }\n    },\n    [keyCode, playSound]\n  );\n\n  const onSoundEnded = useCallback(() => {\n    setIsPlaying(false);\n  });\n\n  useEffect(() => {\n    if (soundSource != null) {\n      audioTag.current.src = soundSource;\n    }\n  }, [soundSource]);\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", onKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keyup\", onKeyPress);\n    };\n  }, [onKeyPress]);\n\n  const buttonClasses = [\"drum-pad\", isPlaying && \"active\"].join(\" \");\n\n  return (\n    <button onClick={onSoundButtonClick} id={keyCode} className={buttonClasses}>\n      <audio\n        ref={audioTag}\n        style={{ display: \"none\" }}\n        className={\"clip\"}\n        id={letter}\n        onEnded={onSoundEnded}\n      />\n      {letter}\n    </button>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}